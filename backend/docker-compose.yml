services:

####################
####### APPS #######
####################

  users-app:
    container_name: users-app
    build:
      context: ./users_app
      dockerfile: Dockerfile 
    ports:
      - "3005:3005"
    depends_on:
      - users-mongodb
    links:
      - users-mongodb

  plans-app:
    container_name: plans-app
    build:
      context: ./plans_app
      dockerfile: Dockerfile 
    ports:
      - "3004:3004"
    depends_on:
      - plans-mongodb
    links:
      - plans-mongodb

  projects-app:
    container_name: projects-app
    build:
      context: ./projects_app
      dockerfile: Dockerfile 
    ports:
      - "3003:3003"
    depends_on:
      - projects-mongodb
      - images-app
    links:
      - projects-mongodb
      - images-app

  images-app:
    container_name: images-app
    build:
      context: ./images_app
      dockerfile: Dockerfile 
    ports:
      - "3002:3002"
    depends_on:
      - images-mongodb
    links:
      - images-mongodb

  tools-app:
    container_name: tools-app
    build:
      context: ./tools_app
      dockerfile: Dockerfile 
    ports:
      - "3001:3001"
    depends_on:
      - tools-mongodb
    links:
      - tools-mongodb

####################
####### DBS ########
####################

  users-mongodb:
    container_name: users-db
    image: mongo:latest
    ports:
      - "27005:27017"

  plans-mongodb:
    container_name: plans-db
    image: mongo:latest
    ports:
      - "27004:27017"
    depends_on:
      - plans-mongo-seed

  projects-mongodb:
    container_name: projects-db
    image: mongo:latest
    ports:
     - "27003:27017"

  images-mongodb:
    container_name: images-db
    image: mongo:latest
    ports:
      - "27002:27017"

  tools-mongodb:
    container_name: tools-db
    image: mongo:latest
    ports:
      - "27001:27017"
    depends_on:
      - tools-mongo-seed

####################
###### SEEDS #######
####################

  plans-mongo-seed:
    image: mongo:latest
    volumes:
      - ./db/plans.json:/plans.json
    command: mongoimport --host plans-db --port 27017 -d picturas-plans -c plans --type json --file /plans.json --jsonArray

  tools-mongo-seed:
    image: mongo:latest
    volumes:
      - ./db/tools.json:/tools.json
    command: mongoimport --host tools-db --port 27017 -d picturas-tools -c tools --type json --file /tools.json --jsonArray

####################
###### TOOLS #######
####################

  # autocrop-worker:
  #   container_name: autocrop-worker
  #   build:
  #     context: ./tools/autocrop
  #     dockerfile: Dockerfile
  #   links:
  #     - rabbitmq
  #   depends_on:
  #     rabbitmq:
  #       condition: service_healthy

  # binarization-worker:
  #   container_name: binarization-worker
  #   build:
  #     context: ./tools/binarization
  #     dockerfile: Dockerfile
  #   links:
  #     - rabbitmq
  #   depends_on:
  #     rabbitmq:
  #       condition: service_healthy

  # border-worker:
  #   container_name: border-worker
  #   build:
  #     context: ./tools/border
  #     dockerfile: Dockerfile
  #   links:
  #     - rabbitmq
  #   depends_on:
  #     rabbitmq:
  #       condition: service_healthy

  # brightness-worker:
  #   container_name: brightness-worker
  #   build:
  #     context: ./tools/brightness
  #     dockerfile: Dockerfile
  #   links:
  #     - rabbitmq
  #   depends_on:
  #     rabbitmq:
  #       condition: service_healthy

  # contrast-worker:
  #   container_name: contrast-worker
  #   build:
  #     context: ./tools/contrast
  #     dockerfile: Dockerfile
  #   links:
  #     - rabbitmq
  #   depends_on:
  #     rabbitmq:
  #       condition: service_healthy

  # crop-worker:
  #   container_name: crop-worker
  #   build:
  #     context: ./tools/crop
  #     dockerfile: Dockerfile
  #   links:
  #     - rabbitmq
  #   depends_on:
  #     rabbitmq:
  #       condition: service_healthy

  # ocr-worker:
  #   container_name: ocr-worker
  #   build:
  #     context: ./tools/ocr
  #     dockerfile: Dockerfile
  #   links:
  #     - rabbitmq
  #   depends_on:
  #     rabbitmq:
  #       condition: service_healthy

  # rotate-worker:
  #   container_name: rotate-worker
  #   build:
  #     context: ./tools/rotate
  #     dockerfile: Dockerfile
  #   links:
  #     - rabbitmq
  #   depends_on:
  #     rabbitmq:
  #       condition: service_healthy

  # scale-worker:
  #   container_name: scale-worker
  #   build:
  #     context: ./tools/scale
  #     dockerfile: Dockerfile
  #   links:
  #     - rabbitmq
  #   depends_on:
  #     rabbitmq:
  #       condition: service_healthy

  watermark-worker:
    container_name: watermark-worker
    build:
      context: ./tools/watermark
      dockerfile: Dockerfile
    links:
      - rabbitmq
    depends_on:
      rabbitmq:
        condition: service_healthy

####################
####### WS #########
####################

  # ws-app:
  #   container_name: ws-app
  #   build:
  #     context: ./ws
  #     dockerfile: Dockerfile
  #   ports:
  #     - "8765:8765"
  #   links:
  #     - rabbitmq
  #     - projects-app
  #     - users-app
  #     - plans-app
  #     - images-app
  #     - tools-app
  #   depends_on:
  #     users-app:
  #       condition: service_started
  #     plans-app:
  #       condition: service_started
  #     tools-app:
  #       condition: service_started
  #     projects-app:
  #       condition: service_started
  #     images-app:
  #       condition: service_started
  #     rabbitmq:
  #       condition: service_healthy

####################
#### WSGATEWAY #####
####################

  # wsgateway:
  #   container_name: wsgateway
  #   build:
  #     context: ./wsgateway
  #     dockerfile: Dockerfile
  #   ports:
  #     - "8764:8764"
  #   links:
  #     - ws-app
  #   depends_on:
  #     ws-app:
  #       condition: service_started

####################
####### BUS ########
####################

  rabbitmq:
    container_name: picturas-rabbitmq
    image: rabbitmq:management
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq/
      - rabbitmq-logs:/var/log/rabbitmq/
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 5s
      timeout: 30s

volumes:
  rabbitmq-data: 
  rabbitmq-logs: